This is an informational text file for Copy Paste Game.

[========================================- Misc. Reminders -========================================]

The edge of the map will be treated as a wall.

Spaces in the map string will be replaced with the empty space tile (maybe '-'?) in the rendered map.

If the rows in the map string are of unequal length, it will show up as a hole in the map, which will be treated
as a bunch of walls. Edit: Nvm, just replace it with actual space or walls.
Edit 2: Actually, uneven rows get filled in with *empty spaces*.

If there are multiple '@'s in the map, the player controls all of them. There should also allowed to be 0.
I might also allow for there to be 2 unique players. If so, player two would be '&'.

Letters: I don't know for sure if these can be interacted with, but if they can, then whatever they do they 
should only do it when explicitly touched / interacted with by the player. That way, if someone wants to, they
can write a message or instructions above / adjacent to / below the map, wall it off, and just have those letters 
sit there, not doing anything.
(Note: it's possible that lowercase letters do something interesting, and uppercase letters just sit there,
or vice versa)

A *possible* point system: if the player stands on a '$', the '$' get's added to the bottom corner of the 
screen, replacing whatever character was there previously. Note: this doesn't mean that the map *has* to abide by
a format that requires that there be an allocated space at the bottome for '$'. It's just recommended.

Maybe you could add a way to change the map size in game???

[=============================================- Main Ideas -=============================================]

The player inputs a string of text, which is then turned into the game map. 

List of tiles:
@ character
- Empty space
# Wall

[===================================- makeMapFromString(string) function -===================================]
This function is supposed to take in the string that will be used to create the map.
It has 3 main parts:

Part 1: Is the input empty?
If the input is empty (input.length() < 1), then it passes a premade input string into the makeMapFromString
function (yes, it calls itself). This results in the function returning a premade, playable map, which tells the
user that their input it empy.

Part 2: How many rows and columns are there?
This uses a for loop and 2 other variables: biggestRowLength and currentRowLength. biggestRowLength will be set
to currentRowLength and currentRowLength will be set to 0 on 2 conditions:

