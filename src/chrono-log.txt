Friday June 20 2025:
// Kyle and I worked on the move function. We added some conditions to the move function.
//
// We gave the move function a recursion limit. Basically, when the move function is initially called, a 0 will be
// passed into the recursion-counting parameter (recursionCount). From there, if the function will check if the
// recursionCount has reached/exceeded the RECURSION_LIMIT. If so, it stops the function. If the function calls itself, 
// it will increment the recursionCount and then pass that value into the new function call.
// 
// We also added some new char constants, including the coin counter and the jump counter
// (on that note, the "dash" ability has been renamed to the "jump" ability).
// 
// We added two more functions. One, called isMovable, checks if a char is movable. The other, called isDangerous, 
// checks if a certain char is dangerous.
//
// Next week, we plan to continue working on the move function.


Friday June 27 2025:
// Kyle and I worked on the move function. We added some conditions to the move function.
// Specifically the condition checking if the player is pushing a movable.
//
// Next week we will test out the move function according to the diagram that I made.


Friday July 11 2025:
// Kyle and I tested out the move function. We created the testing ground map, which contains 16 tests.
// All but one passed. The one test that failed:
// The player moves into a dangerous spot (onto an enemy). At that point, the player should disappear
// (be destroyed), and the enemy stays as is. Instead, both the player and the enemy stayed put. Nothing changed.
// The problem? Instead of setting the players position to an empty space, it was checking to see if the
// player's position WAS an empty space.
// I simply removed an '=' sign.
//
// Next time, we will likely work on the jump function.


Friday July 18 2025:
// Got started on the jump function.
// Also, potential new names for the jump ability: Warp, blink.

Friday July 25 2025:
// Added part of a coin condition in the jump function.
// 
// Added some comments.
// 
// Added a new branch, "input", which is being used to test out a player input loop. I got it to work in some ways,
// but not others. Here is a timeline for how it went:
// // > I created the loop and 5 conditions: One for if the player chooses to quit, and one for each WASD key.
// // There was not anything to allow the player to jump. It didn't work; No matter what I did the player didn't
// // move. Not only that, but the console didn't display any of my custom made cout error statments, which means
// // that my move wasn't being treated at invalid in the move function.
// // 
// // > The issue was because it was using the playerCoordinates vector to find and move players, but
// // it never actually populated that vector. I Fixed this by adding a line to the player input loop that invoked
// // the findPlayers function. At this point it worked (sort of); I could move the player (and even all instances
// // of the player, if there were multiple), but only once. After this it would say that I was trying to move From
// // an empty space. I knew what the issue was right away.
// // 
// // > The issue was that, upon being populated, the playerCoordinates vector could not be updated. So, I fixed
// // that by telling the findPlayers function to clear and repopulate the vector if it was called on more than
// // once. Now, it work just fine, for the most part. I can move the player, I can move at least 3 players at
// // once, I can push stuff, and the players will obey other objects, other instances of the player,
// // and the map edge. However, there is still one unsolved issue: When there are three instances of the player in
// // a row (right next to each other), when I move right (press 'd') they all move 3 spaces. This doesn't happen
// // if the players are not next to each other, or if I choose another direction.
// // Example:
// // - - - - - - ]
// // @ @ @ - - - ]
// // - - - - - - ]
// // move: d
// // - - - - - - ]
// // - - - @ @ @ ]
// // - - - - - - ]
// 
// I think the above mentioned issue has to do with the push mechanic, the way the playerCoordinates vector
// refreches, and the order that the program parses the map when finding and moving players. 
// Here is how I (think I may have) figured it out:
// // - - - - - - ]
// // - - @ @ @ - ]
// // - - - - - - ]
// // move: d
// // - - - - - - ]
// // - - - @ @ @ ]
// // - - - - - - ]
// In this above example, when I press 'd' and move right, the console displays two of my cout error statemets.
// Each of them tell me that a player had tried to move into a wall. This means that, while players had tried to
// move, only one moved, and two of them were blocked by a wall (or a player blocked by a wall).
// Here is what I thought had happened: 
// // > Due to the order that the program parses the map, the leftmost player gets to technically move first.
// //
// // > The leftmost player moves, pushing the other two players in the process.
// //
// // > The middle player tries to move. It is blocked by the rightmost player, so it tries to push them. The
// // rightmost player is blocked by the wall.
// // 
// // > Finally, the rightmost player tries to move right but doesn't, because it is being blocked by the wall.
//
// At least, that was my first theory. However, had there been no obstruction, it would have played out like this:
// Leftmost player moves to the right and pushes the middle and rightmost players to the right as well. Then,
// the middle player moves right, pushing the rightmost player to the right. Then, the rightmost player moves
// right. This scenario would look like this:
// // - - - - - - ]
// // @ @ @ - - - ]
// // - - - - - - ]
// // move: d
// // - - - - - - ]
// // - @ - @ - @ ]
// // - - - - - - ]
// 
// That is not what happens. Here is my second theory:
// // > The findPlayers function is invoked. It finds 3 players, and sees that they are located at (x, y), (x+1, y),
// // and (x+2, y), respectively.
// //
// // > The program is designed to look at each of these coordinates and move whatever is there to the right.
// // 
// // > First, whatever is at (x, y) will be moved right. The leftmost player is there, so it moves right, pushing
// // the middle and leftmost players.
// //
// // > Then, whatever is at (x+1, y) will be moved right. The leftmost player is there because it moved there,
// // so it moves right, pushing the middle and leftmost players.
// //
// // > Finally, whatever is at (x+2, y) will be moved right. The leftmost player is there, of course, so it moves
// // right a third time. 
// // 
// // > This all happens because the leftmost player is moving in the same direction as the metaphorical "pointer".